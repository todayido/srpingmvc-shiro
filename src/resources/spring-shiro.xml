<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  
        http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
        ">

    <description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:combination.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login" />
        <property name="successUrl" value="/user/list" />
        <property name="unauthorizedUrl" value="/login" />
        <property name="filterChainDefinitions">
            <value>
                /login = anon
                /logout = authc
                <!-- /user/** = roles["admin,login"] 当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles：此处用户必须有amdin和login两个角色才能访问-->
                <!--/user/** = perms[login]  此处和角色一样，权限名称login，取名时注意 user:login 这种格式 -->
                /user/update* = perms[user:update]
                /user/get* = perms[user:get]
                /user/info* = perms[user:get]
                /user/list = authc
                /user/** = roles[admin]
                <!--
                /role/edit/* = perms[role:edit]
                /role/save = perms[role:edit]
                /role/list = perms[role:view] -->
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 定义 Shiro SecurityManager 对象 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="myRealm" />
            </list>
        </property>
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <bean id="myRealm" class="com.core.MyRealm" />

    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource"  ref="dataSource"></property>
        <property name="authenticationQuery" value="SELECT PASSWORD FROM T_USER WHERE USERNAME = ?"/>
        <property name="userRolesQuery" value="SELECT a.role_name FROM t_role a WHERE a.id  IN(SELECT b.role_id FROM t_user_role b LEFT JOIN t_user c ON b.user_id=c.id WHERE c.username=?)"/>
        <property name="permissionsQuery" value="SELECT a.permission_name FROM t_permission a WHERE a.id IN(SELECT b.permission_id FROM t_role_permission b LEFT JOIN t_role c ON b.permission_id = c.id WHERE c.role_name =?)"/>
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="saltStyle" value="NO_SALT"/>
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
    </bean>

    <!-- 密码匹配规则 -->
    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5"/><!-- 必须填写没有默认值 -->
        <property name="storedCredentialsHexEncoded" value="true"/><!-- 加密用Hex编码，false时使用Base63编码 -->
        <property name="hashIterations" value="1"/><!-- 迭代次数，默认为：1 -->
    </bean>

    <!-- Cache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" />

    <!-- 以下配置shiro使用注解,但是以下两个bean的配置需要放到spring-mvc的配置文件中 -->
    <!-- bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/ -->

    <!-- AOP式方法级权限检查  -->
    <!--bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean -->

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 异常 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authc.UnknownAccountException">
                    <!-- 出现异常转到login/login.jsp页面 -->
                    login/login
                </prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">
                    login/login
                </prop>
                <prop key="org.apache.shiro.authz.UnauthorizedException">
                    login/login
                </prop>
            </props>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!-- 使用properties来配置数据源 -->
        <property name="driverClassName">
            <value>${jdbc.driverClassName}</value>
        </property>
        <property name="url">
            <value>${jdbc.url}</value>
        </property>
        <property name="username">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
    </bean>

</beans>